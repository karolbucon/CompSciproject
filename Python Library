import json
import datetime

class Book:
    def __init__(self, title, author, ISBN, quantity):
        self.title = title
        self.author = author
        self.ISBN = ISBN
        self.quantity = quantity

    def display(self):
        return f"Title: {self.title}, Author: {self.author}, ISBN: {self.ISBN}, Quantity: {self.quantity}"

class Patron:
    def __init__(self, name, ID, contact):
        self.name = name
        self.ID = ID
        self.contact = contact

    def display(self):
        return f"Name: {self.name}, ID: {self.ID}, Contact: {self.contact}"

class Transaction:
    def __init__(self, book, patron, due_date):
        self.book = book
        self.patron = patron
        self.due_date = due_date
        self.fine = 0

    def check_in(self):
        self.book.quantity += 1

    def check_out(self):
        if self.book.quantity > 0:
            self.book.quantity -= 1
        else:
            print("Book is not available")

class Library:
    def __init__(self):
        self.books = []
        self.patrons = []
        self.transactions = []

    def add_book(self, book):
        self.books.append(book)

    def remove_book(self, book):
        self.books.remove(book)

    def add_patron(self, patron):
        self.patrons.append(patron)

    def remove_patron(self, patron):
        self.patrons.remove(patron)

    def search_book(self, title):
        for book in self.books:
            if book.title == title:
                return book.display()

    def manage_transaction(self, transaction):
        self.transactions.append(transaction)

    def save_data(self):
        with open('library.json', 'w') as f:
            json.dump({
                'books': [book.__dict__ for book in self.books],
                'patrons': [patron.__dict__ for patron in self.patrons]
            }, f)

    def load_data(self):
        try:
            with open('library.json', 'r') as f:
                data = json.load(f)
                self.books = [Book(**book) for book in data['books']]
                self.patrons = [Patron(**patron) for patron in data['patrons']]
        except FileNotFoundError:
            pass

def main():
    library = Library()
    library.load_data()

    while True:
        print("1. Add book")
        print("2. Remove book")
        print("3. Add patron")
        print("4. Remove patron")
        print("5. Search book")
        print("6. Manage transaction")
        print("7. Save and exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            title = input("Enter book title: ")
            author = input("Enter book author: ")
            ISBN = input("Enter book ISBN: ")
            quantity = int(input("Enter book quantity: "))
            book = Book(title, author, ISBN, quantity)
            library.add_book(book)
        elif choice == '2':
            title = input("Enter book title: ")
            book = next((book for book in library.books if book.title == title), None)
            if book is not None:
                library.remove_book(book)
            else:
                print("Book not found")
        elif choice == '3':
            name = input("Enter patron name: ")
            ID = input("Enter patron ID: ")
            contact = input("Enter patron contact: ")
            patron = Patron(name, ID, contact)
            library.add_patron(patron)
        elif choice == '4':
            ID = input("Enter patron ID: ")
            patron = next((patron for patron in library.patrons if patron.ID == ID), None)
            if patron is not None:
                library.remove_patron(patron)
            else:
                print("Patron not found")
        elif choice == '5':
            title = input("Enter book title: ")
            print(library.search_book(title))
        elif choice == '6':
            title = input("Enter book title: ")
            book = next((book for book in library.books if book.title == title), None)
            ID = input("Enter patron ID: ")
            patron = next((patron for patron in library.patrons if patron.ID == ID), None)
            due_date = datetime.date.today() + datetime.timedelta(days=14)
            transaction = Transaction(book, patron, due_date)
            library.manage_transaction(transaction)
        elif choice == '7':
            library.save_data()
            break

if __name__ == "__main__":
    main()
